@using ResearchApp.ViewModel
@model FormViewModel
<div class="k-grid k-widget">
    <form id="edit-form">
        <div class="k-grid-content k-auto-scrollable">
            <div class="col-md-11 mt-3">
                @foreach (var item in Model.TableColumns.Where(x => x.Display == true))
                {
                    if (!item.IDColumn && item.IsEditable)
                    {
                        <div class="row form-group">
                            <label class="col-md-1 col-form-label">@item.DisplayName <strong class="text-danger">@(item.IsRequired ? "*" : "")</strong></label>
                            <div class="col-md-5 dirty-marker k-dirty-cell">
                                <span class=""></span>
                                @switch (item.Type)
                                {
                                    case "string":
                                        string value = Model.SelectedItem != null ? Convert.ToString(Model.SelectedItem[item.ColumnName]) : null;
                                        if (item.ColumnName == "Gender")
                                        {
                                            @(Html.Kendo().DropDownList()
                                               .Name(item.ColumnName)
                                               .Value(value)
                                               .OptionLabel("Select")
                                               .DataValueField("Option")
                                               .DataTextField("Option")
                                               .HtmlAttributes(new { style = "width:60%" })
                                               .BindTo(new List<TextDropdownOptions>
                                                   {
                                                       new TextDropdownOptions{
                                                           Id = "Male",
                                                           Option = "Male"
                                                       },
                                                       new TextDropdownOptions{
                                                           Id = "Female",
                                                           Option = "Female"
                                                       },
                                                       new TextDropdownOptions{
                                                           Id = "Other",
                                                           Option = "Other"
                                                       }
                                                   })
                                            )
                                        }
                                        else if (item.ColumnName == "Role")
                                        {
                                            @(Html.Kendo().DropDownList()
                                                .Name(item.ColumnName)
                                                .Value(value)
                                                .OptionLabel("Select")
                                                .DataValueField("Option")
                                                .DataTextField("Option")
                                                .HtmlAttributes(new { style = "width:60%" })
                                                .BindTo(new List<TextDropdownOptions>
                                                    {
                                                        new TextDropdownOptions{
                                                            Id = "Author",
                                                            Option = "Author"
                                                        },
                                                        new TextDropdownOptions{
                                                            Id = "Editor",
                                                            Option = "Editor"
                                                        },
                                                        new TextDropdownOptions{
                                                            Id = "Translator",
                                                            Option = "Translator"
                                                        }
                                                    })
                                            )
                                        }
                                        else
                                        {
                                            @(Html.TextBox(item.ColumnName, value, new { @class = "k-textbox", style = "width:60%", @dataValidation = item.IsRequired ? "required" : "" }))
                                        }
                                        break;
                                    case "int":
                                        @(Html.Kendo().NumericTextBox()
                                            .Spinners(false)
                                            .Name(item.ColumnName)
                                            .Format("#")
                                            .HtmlAttributes(new { @dataValidation = item.IsRequired ? "required" : "" })
                                            .Value(Model.SelectedItem != null && Model.SelectedItem[item.ColumnName] != null && Model.SelectedItem[item.ColumnName].ToString() != "" ?
                                                Model.SelectedItem[item.ColumnName] : null))
                                        break;
                                    case "decimal":
                                        @(Html.Kendo().NumericTextBox()
                                            .Spinners(false)
                                            .Format("#.########")
                                            .Decimals(8)
                                            .Name(item.ColumnName)
                                            .HtmlAttributes(new { @dataValidation = item.IsRequired ? "required" : "" })
                                            .Value(Model.SelectedItem != null && Model.SelectedItem[item.ColumnName] != null && Model.SelectedItem[item.ColumnName].ToString() != "" ?
                                                Model.SelectedItem[item.ColumnName] : null))
                                        break;
                                    case "boolean":
                                        bool chkValue = Model.SelectedItem != null ? Model.SelectedItem[item.ColumnName] ?? false : false;
                                        @(Html.CheckBox(item.ColumnName, chkValue))
                                        break;
                                    case "dropdown":
                                        value = Model.SelectedItem != null ? Convert.ToString(Model.SelectedItem[item.ColumnName.Remove(item.ColumnName.Length - 2)] ?? null) : null;
                                        @(Html.Kendo().DropDownList()
                                                  .Name(item.ColumnName.Remove(item.ColumnName.Length - 2))
                                                  .DataValueField("Option")
                                                  .DataTextField("Option")
                                                  .Filter(FilterType.Contains)
                                                  .Height(200)
                                                  .Value(value)
                                                  .ValuePrimitive(true)
                                                  .OptionLabel("Select")
                                                  .HtmlAttributes(new { style = "width:60%", @dataValidation = item.IsRequired ? "required" : "" })
                                                  .DataSource(source =>
                                                  {
                                                      source.Custom()
                                                            .ServerFiltering(true)
                                                            .ServerPaging(true)
                                                            .PageSize(20)
                                                            .Type("aspnetmvc-ajax")
                                                            .Transport(transport =>
                                                            {
                                                                transport.Read("GetDropdownOptions", "Grid", new { treeTable = item.Fktable, optionCol = item.FkdisplayCol });
                                                            })
                                                            .Schema(schema =>
                                                            {
                                                                schema
                                                                .Model(model =>
                                                                {
                                                                    model.Id("Id");
                                                                    model.Field("Option", typeof(string));
                                                                })
                                                                .Data("Data")
                                                                      .Total("Total");
                                                            });
                                                  })
                                                  //.Events(evt => evt.DataBound("function(e){ onFormDropdownDataBound(e,'" + value + "')}"))
                                                  .Events(evt => evt.Select("onFormDropdownSelect"))
                                                  .Virtual(v => v.ItemHeight(26)
                                                  .ValueMapper("function(options){ dropDownOptionMapper(options,'" + item.Fktable + "')}"))
                                        )
                                        break;
                                    default:
                                        value = Model.SelectedItem != null ? Model.SelectedItem[item.ColumnName] : null;
                                        @(Html.TextArea(item.ColumnName, value, new { @class = "k-textbox", style = "width:60%", @cols = 80, @rows = 5, @dataValidation = item.IsRequired ? "required" : "" }))
                                        break;
                                }
                            </div>
                        </div>
                    }
                    else if (Model.SelectedItem != null && Model.SelectedItem[item.ColumnName] != null)
                    {
                        if (item.IDColumn)
                        {
                            @(Html.Hidden(item.ColumnName, (int)(Model.SelectedItem[item.ColumnName]), new { @id_col = item.ColumnName }))
                        }
                        else
                        {
                            <input type="hidden" id="@item.ColumnName" name="@item.ColumnName" value="@(Model.SelectedItem[item.ColumnName] == null ? string.Empty :  Model.SelectedItem[item.ColumnName])" />
                        }
                        <div class="row form-group form-primary-key">
                            <label class="col-md-1 col-form-label">@item.DisplayName</label>
                            <div>
                                <label class="col-form-label">@Model.SelectedItem[item.ColumnName]</label>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
        <div id="form-footer">
        </div>
    </form>
</div>

<script>
    $(function () {
        var customToolbarTemp = kendo.template($("#form-view-custom-toolbar").html());
        $('#form-footer').append(customToolbarTemp);
        $("#form-view-switch").kendoSwitch({
            checked: isFormWrap,
            change: function (e) {
                resetAddNewProps();
                toggleFormView();
            }
        });

        if (isGridEditable) {
            $('.stopEditable').removeClass("d-none");
            $('.startEditable').addClass("d-none");
            $('.action-btns').removeClass('k-state-disabled');
        }
        else {
            $('.stopEditable').addClass("d-none");
            $('.startEditable').removeClass("d-none");
            $('.action-btns').addClass('k-state-disabled');
        }

        if (selectedItemIndex === 0) {
            $('#prev-form-btn').addClass('k-state-disabled');
        }
        if (selectedItemIndex === grid.dataSource.data().length - 1) {
            $('#next-form-btn').addClass('k-state-disabled');
        }
        if (grid.dataSource.page() == 1) {
            $('#first-form-btn').addClass('k-state-disabled');
        }
        else if (grid.dataSource.totalPages() == grid.dataSource.page()) {
            $('#last-form-btn').addClass('k-state-disabled');
        }

        var height = $(window)[0].innerHeight;
        $('.k-grid-content').height(height - 90);

        toggleFormEnable();

        $('#form-paging-info').text(getPagingInfo());
        var formName = '#edit-form';
        $(formName + " :input").on("keyup paste", function (e) {
            if ($(this).val() && event.which != 9) {
                $(this).closest('.k-dirty-cell').children(":first").addClass('k-dirty');
            }
        });
        $(formName + " :input:checkbox").on("change", function (e) {
            $(this).closest('.k-dirty-cell').children(":first").addClass('k-dirty');
        });
        $(formName + " input[data-role='dropdownlist']").on("change", function (e) {
            $(this).closest('.k-dirty-cell').children(":first").addClass('k-dirty');
        });
        var lastTabIndex = false;
        $(document).on('keyup', function (event) {
            if (event.which == 9) {
                var selectedItem = $(event.target).closest('.row').parent().closest('.row');
                if ($(selectedItem).is(':last-child')) {
                    lastTabIndex = true;
                }
                if (lastTabIndex && !$(selectedItem).is(':last-child')) {
                    $("form :input:enabled").each(function (index, ele) {
                        if ($(ele).attr('type') !== 'hidden') {
                            if ($(ele).attr('data-role') == 'dropdownlist') {
                                var item = $(ele).data("kendoDropDownList");
                                item.focus();
                                return false;
                            }
                            else {
                                $(ele).focus();
                                return false;
                            }
                        }
                    });
                }
                if (!$(selectedItem).is(':last-child')) {
                    lastTabIndex = false;
                }
            }
        });
    });
    var pageSize = 1000;
    function getPagingInfo() {
        var page = grid.dataSource.page();
        var totalItems = grid.dataSource.total();
        return `Item ${page > 1 ? ((page - 1) * pageSize) + (selectedItemIndex + 1) : selectedItemIndex + 1} of ${totalItems}`
    }

    if (currentFontSize) {
        $('.k-grid').css('font-size', currentFontSize);
    }

    $("#edit-form").kendoValidator({
        rules: {
            //customRule1: function (input) {
            //    // all of the input must have a value
            //    return $.trim(input.val()) !== "";
            //},
            requiredRule: function (input) {
                if (input.is("[datavalidation='required']")) {
                    return input.val() !== "";
                }
                return true;
            }
        },
        messages: {
            requiredRule: "This is required field.",
            //customRule2: "Your UserName must be Tom"
        }
    });
</script>
