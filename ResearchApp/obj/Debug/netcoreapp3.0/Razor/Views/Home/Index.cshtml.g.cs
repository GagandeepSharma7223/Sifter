#pragma checksum "C:\Projects\ResearchApp\ResearchApp\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "587046c56107bc0cf9facda874bfb358e026547e"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Projects\ResearchApp\ResearchApp\Views\_ViewImports.cshtml"
using ResearchApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Projects\ResearchApp\ResearchApp\Views\_ViewImports.cshtml"
using Kendo.Mvc.UI;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Projects\ResearchApp\ResearchApp\Views\Home\Index.cshtml"
using ResearchApp.Data;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"587046c56107bc0cf9facda874bfb358e026547e", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ef318a74dc936a098c69682913676a2d60acfd18", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "C:\Projects\ResearchApp\ResearchApp\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<div class=\"placeholders mb-2\">\r\n    <div class=\"row d-flex justify-content-start\">\r\n        <div class=\"col-md-12\">\r\n            ");
#nullable restore
#line 9 "C:\Projects\ResearchApp\ResearchApp\Views\Home\Index.cshtml"
        Write(Html.Kendo().Splitter()
                                  .Name("vertical")
                                  .Orientation(SplitterOrientation.Vertical)

                                  .Panes(verticalPanes =>
                                  {
                                      verticalPanes.Add()
                                          .HtmlAttributes(new { id = "top-pane" })
                                          .Scrollable(false)
                                          .Collapsible(false)
                                          .Content(
                                            Html.Kendo().Splitter()
                                                .Name("horizontal")
                                                .Panes(horizontalPanes =>
                                                {
                                                    horizontalPanes.Add()
                                                        .HtmlAttributes(new { id = "left-pane" })
                                                        .Size("200px")
                                                        .Scrollable(false)
                                                        .Collapsible(true)
                                                        .LoadContentFrom("LoadTreeView", "Home");

                                                    horizontalPanes.Add()
                                                       .HtmlAttributes(new { id = "myModal" })
                                                       .LoadContentFrom("GetView", "Grid", new { type = GridTypes.Work });
                                                }).ToHtmlString());
                                  })
            );

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n");
#nullable restore
#line 41 "C:\Projects\ResearchApp\ResearchApp\Views\Home\Index.cshtml"
Write(Html.Kendo().Dialog()
              .Name("dialog")
              .Title("Login")
              .Content("<div class='demo-section k-content'>" +
                  "<form id='loginForm' data-role='validator' novalidate='novalidate' onSubmit='return false;'>" +
                      "<ul id='fieldlist'><li>" +
                      "<label>Password:</label>" +
                      (Html.Kendo().TextBox().Name("login_password").HtmlAttributes(new { type = "password", required = "required" })
                       .Name("Password")).ToHtmlString() +
                       "</li>" +
                       "<li class='actions'><button type='button' data-role='button' data-click='login'>Login</button>" +
                       "</li></ul></form></div>")
                      .Width(400)
                      .Modal(true)
                      .Visible(false)
                      .Events(ev => ev.Close("onClose").Show("onOpen"))
);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"

<script type=""text/x-kendo-template"" id=""message"">
    <span class=""k-widget k-tooltip k-tooltip-validation k-invalid-msg field-validation-error"" data-for=""#=field#""
          data-valmsg-for=""#=field#"" id=""#=field#_validationMessage"" role=""alert"">
        <span class=""k-icon k-i-warning"">
        </span> #=message#
    </span>
</script>

<script type=""text/x-kendo-template"" id=""custom-toolbar"">
    <div class=""text-right"" style=""flex:1;"">
        <span class=""label"">Word Wrap</span> <input type=""checkbox"" id=""wrap-switch"" aria-label=""Notifications Switch"" />
        <a role=""button"" class=""k-button k-button-icontext k-grid-StartEditing"" id=""removeFilter"" href="""">Remove Filters</a>
        <a role=""button"" class=""k-button k-button-icontext k-grid-StartEditing"" id=""startEditable"" href="""">Start Editing</a>
        <a role=""button"" class=""k-button k-button-icontext k-grid-StopEditing"" id=""stopEditable"" href="""">Stop Editing</a>
        <a role=""button"" id=""custom-add-btn"" class=""k-button k-butto");
            WriteLiteral(@"n-icontext"" href=""""><span class=""k-icon k-i-plus""></span>Add new record</a>
        <a role=""button"" id=""custom-save-btn"" class=""k-button k-button-icontext"" href=""""><span class=""k-icon k-i-check""></span>Save changes</a>
        <a role=""button"" id=""custom-cancel-btn"" class=""k-button k-button-icontext"" href=""""><span class=""k-icon k-i-cancel""></span>Cancel changes</a>
    </div>
</script>

<script type=""text/javascript"">
    var isGridEditable = false;
    var isLoggedIn = false;
    var isWordWrap = false;
    var browserWindow = $(window);
    var currentFilterColumn;
    //register custom validation rules
    (function ($, kendo) {
        $.extend(true, kendo.ui.validator, {
            rules: { // custom rules
                titlevalidation: function (input, params) {
                    if (input.is(""[name='Title']"") && input.val() == """") {
                        input.attr(""data-titlevalidation-msg"", ""Title is required field"");
                        return false;
                 ");
            WriteLiteral(@"   }
                    return true;
                },
                namevalidation: function (input, params) {
                    if (input.is(""[name='Name']"") && input.val() == """") {
                        input.attr(""data-namevalidation-msg"", ""Name is required field"");
                        return false;
                    }
                    return true;
                }
            },
            messages: { //custom rules messages
                titlevalidation: function (input) {
                    // return the message text
                    return input.attr(""data-val-titlevalidation"");
                },
                namevalidation: function (input) {
                    // return the message text
                    return input.attr(""data-val-namevalidation"");
                }

            }
        });
    })(jQuery, kendo);

    function showLoading() {
        document.getElementById(""loader"").style.display = ""block"";
        document.getElementByI");
            WriteLiteral(@"d(""body-container"").style.display = ""none"";
    }

    function hideLoading() {
        document.getElementById(""loader"").style.display = ""none"";
        document.getElementById(""body-container"").style.display = ""block"";
    }

    function resizeSplitter() {
        var outerSplitter = $(""#vertical"").data(""kendoSplitter"");
        outerSplitter.wrapper.height($('.grid-container').height());
        outerSplitter.resize();
    }

    function resizeGrid() {
        $(""#grid"").data(""kendoGrid"").resize();
        var height = $(window)[0].innerHeight;
        $('.grid-container').height(height - 50);
        $('#grid .k-grid-content').height(height - 120);
    }

    $(window).resize(function () {
        resizeGrid();
    });

    $(function () {
        jQuery.fn.scrollTo = function(elem) {
            $(this).scrollTop($(this).scrollTop() - $(this).offset().top + elem.offset().top);
            return this;
        };

        populateDDSession('Author', 'FullName');
        p");
            WriteLiteral(@"opulateDDSession('Category', 'Name');
        populateDDSession('City', 'Name');
        populateDDSession('Country', 'Name');
        populateDDSession('Language', 'Name');
        populateDDSession('Publisher', 'Name');
        populateDDSession('Work', 'Title');

");
            WriteLiteral(@"
        var container = $(""#loginForm"");
        kendo.init(container);
        container.kendoValidator({
            rules: {
                validmask: function (input) {
                    console.log(input);
                    if (input.is(""[data-validmask-msg]"") && input.val() != """") {
                        var maskedtextbox = input.data(""kendoMaskedTextBox"");
                        return maskedtextbox.value().indexOf(maskedtextbox.options.promptChar) === -1;
                    }

                    return true;
                }
            }
        });
            
        showLoading();

        $('#Password').keypress(function (e) {
            if (e.which == 13) {
                login();
                e.preventDefault();
            }
        });
    });

    kendo.syncReady(function () { jQuery(""#switch"").kendoSwitch({}); });

    function showMessage(container, name, errors) {
        //add the validation message to the form
        var validationMessag");
            WriteLiteral(@"eTmpl = kendo.template($(""#message"").html());
        var output = validationMessageTmpl({
            field: name,
            message: errors
        }).trim();

        $(output).insertAfter(container.find(""[name='"" + name + ""']""));
    }

    //function dataSourceShared(e) {
    //    debugger;
    //    var field = e.field;
    //    var dataSource = $(""#grid"").data().kendoGrid.dataSource;
    //    return new kendo.data.DataSource({
    //        data: uniqueForField(dataSource.data(), field)
    //    });
    //}

    function error_handler(e) {
        if (e.errors) {
            var message = ""Errors:\n"";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + ""\n"";
                    });
                }
            });
        }
    }

    function login(e) {
        $('#loginForm').find('.k-tooltip').remove();
        var validato");
            WriteLiteral(@"r = $(""#loginForm"").data(""kendoValidator"");
        if (validator.validate()) {
            $.post(""/Home/Login"", { password: $('#Password').val() }, function (success) {
                var dialog = $(""#dialog"").data(""kendoDialog"");
                if (success) {
                    isLoggedIn = true;
                    $('#Password').val('');
                    toggleEditable();
                    $('#startEditable').addClass(""d-none"");
                    $('#stopEditable').removeClass(""d-none"");
                    dialog.close();
                }
                else {
                    showMessage(dialog.element, 'Password', 'Invalid Password.');
                }
            })
        }
    }

    function makeGridEditable() {
        isGridEditable = true;
    }

    function toggleEditable() {
        isGridEditable = !isGridEditable;
        var grid = $(""#grid"").data(""kendoGrid"");
        if (isGridEditable) {
            grid.showColumn(grid.columns[grid.columns.l");
            WriteLiteral(@"ength - 1]);
        }
        else {
            grid.hideColumn(grid.columns[grid.columns.length - 1]);
        }
    }

    function numericEditor(container, options) {
        $('<input data-bind=""value:' + options.field + '""/>')
            .appendTo(container)
            .kendoNumericTextBox({
                decimals: 0,
                format: ""#"",
                spinners: false
            });
    }

    function checkIfGridEditable(e) {
        return isGridEditable;
    }

    function loadData(e) {
        showLoading();
        $(""#myModal"").kendoSplitter();
        var splitter = $(""#myModal"").data(""kendoSplitter"");
        var view = $(e.node).attr(""param"");
        switch (view) {
            case ""author"":
                splitter.ajaxRequest("".k-pane:last"", ""/Grid/GetView"", { type: ");
#nullable restore
#line 288 "C:\Projects\ResearchApp\ResearchApp\Views\Home\Index.cshtml"
                                                                          Write((int)GridTypes.Author);

#line default
#line hidden
#nullable disable
            WriteLiteral(" });\r\n                break;\r\n            case \"category\":\r\n                splitter.ajaxRequest(\".k-pane:last\", \"/Grid/GetView\", { type: ");
#nullable restore
#line 291 "C:\Projects\ResearchApp\ResearchApp\Views\Home\Index.cshtml"
                                                                          Write((int)GridTypes.Category);

#line default
#line hidden
#nullable disable
            WriteLiteral(" });\r\n                break;\r\n            case \"language\":\r\n                splitter.ajaxRequest(\".k-pane:last\", \"/Grid/GetView\", { type: ");
#nullable restore
#line 294 "C:\Projects\ResearchApp\ResearchApp\Views\Home\Index.cshtml"
                                                                          Write((int)GridTypes.Language);

#line default
#line hidden
#nullable disable
            WriteLiteral(" });\r\n                break;\r\n            case \"city\":\r\n                splitter.ajaxRequest(\".k-pane:last\", \"/Grid/GetView\", { type: ");
#nullable restore
#line 297 "C:\Projects\ResearchApp\ResearchApp\Views\Home\Index.cshtml"
                                                                          Write((int)GridTypes.City);

#line default
#line hidden
#nullable disable
            WriteLiteral(" });\r\n                break;\r\n            case \"region\":\r\n                splitter.ajaxRequest(\".k-pane:last\", \"/Grid/GetView\", { type: ");
#nullable restore
#line 300 "C:\Projects\ResearchApp\ResearchApp\Views\Home\Index.cshtml"
                                                                          Write((int)GridTypes.Region);

#line default
#line hidden
#nullable disable
            WriteLiteral(" });\r\n                break;\r\n            case \"country\":\r\n                splitter.ajaxRequest(\".k-pane:last\", \"/Grid/GetView\", { type: ");
#nullable restore
#line 303 "C:\Projects\ResearchApp\ResearchApp\Views\Home\Index.cshtml"
                                                                          Write((int)GridTypes.Country);

#line default
#line hidden
#nullable disable
            WriteLiteral(" });\r\n                break;\r\n            case \"publisher\":\r\n                splitter.ajaxRequest(\".k-pane:last\", \"/Grid/GetView\", { type: ");
#nullable restore
#line 306 "C:\Projects\ResearchApp\ResearchApp\Views\Home\Index.cshtml"
                                                                          Write((int)GridTypes.Publisher);

#line default
#line hidden
#nullable disable
            WriteLiteral(" });\r\n                break;\r\n            case \"book\":\r\n                splitter.ajaxRequest(\".k-pane:last\", \"/Grid/GetView\", { type: ");
#nullable restore
#line 309 "C:\Projects\ResearchApp\ResearchApp\Views\Home\Index.cshtml"
                                                                          Write((int)GridTypes.Work);

#line default
#line hidden
#nullable disable
            WriteLiteral(" });\r\n                break;\r\n            case \"workauthor\":\r\n                splitter.ajaxRequest(\".k-pane:last\", \"/Grid/GetView\", { type: ");
#nullable restore
#line 312 "C:\Projects\ResearchApp\ResearchApp\Views\Home\Index.cshtml"
                                                                          Write((int)GridTypes.WorkAuthor);

#line default
#line hidden
#nullable disable
            WriteLiteral(" });\r\n                break;\r\n            case \"unit\":\r\n                splitter.ajaxRequest(\".k-pane:last\", \"/Grid/GetView\", { type: ");
#nullable restore
#line 315 "C:\Projects\ResearchApp\ResearchApp\Views\Home\Index.cshtml"
                                                                          Write((int)GridTypes.Unit);

#line default
#line hidden
#nullable disable
            WriteLiteral(" });\r\n                break;\r\n            default:\r\n                splitter.ajaxRequest(\".k-pane:last\", \"/Grid/GetView\", { type: ");
#nullable restore
#line 318 "C:\Projects\ResearchApp\ResearchApp\Views\Home\Index.cshtml"
                                                                          Write((int)GridTypes.Work);

#line default
#line hidden
#nullable disable
            WriteLiteral(@" });
                break;
        }
    }

    function onDataBound(e) {
        console.log(""event data bound"");
        $('.k-grid-content').scrollTop(0);
        customActions();
        toggleEdit();
        if (isWordWrap) {
            $('.k-grid td').removeClass('text-nowrap').addClass('text-wrap');
        }
        else {
            $('.k-grid td').removeClass('text-wrap').addClass('text-nowrap');
        }
        hideLoading();
        resizeGrid();
        resizeSplitter();
        browserWindow.resize(resizeSplitter);
    }

    function toggleEdit() {
        var grid = $(""#grid"").data(""kendoGrid"");
        if (isGridEditable) {
            $('#stopEditable').removeClass(""d-none"");
            $('#startEditable').addClass(""d-none"");
            grid.showColumn(grid.columns[grid.columns.length - 1]);
        }
        else {
            $('#stopEditable').addClass(""d-none"");
            $('#startEditable').removeClass(""d-none"");
            grid.hideColumn(grid.");
            WriteLiteral(@"columns[grid.columns.length - 1]);
        }
    }

    function customActions() {
        if ($(""#custom-add-btn"").length == 0) {
            var customToolbarTemp = kendo.template($(""#custom-toolbar"").html());
            $("".k-grid .k-pager-info"").addClass('pager-info').after(customToolbarTemp);
            $("".k-grid .k-grid-toolbar"").addClass('d-none');
            $(""#wrap-switch"").kendoSwitch({
                checked: isWordWrap,
                change: function (e) {
                    isWordWrap = !isWordWrap;
                    if (isWordWrap) {
                        $('.k-grid td').removeClass('text-nowrap').addClass('text-wrap');
                    }
                    else {
                        $('.k-grid td').removeClass('text-wrap').addClass('text-nowrap');
                    }
                }
            });
        }
    }

    function onClose() {
    }

    function onOpen(e) {
        $('#dialog input').focus();
    }

    $(document).on(""click""");
            WriteLiteral(@", '#startEditable', function (e) {
        if (!isLoggedIn) {
            $('#dialog').data(""kendoDialog"").open();
        }
        else {
            toggleEditable();
            $('#startEditable').addClass(""d-none"");
            $('#stopEditable').removeClass(""d-none"");
        }
        e.preventDefault();
    });

    $(document).on(""click"", '#stopEditable', function (e) {
        toggleEditable();
        $(this).addClass(""d-none"");
        $('#startEditable').removeClass(""d-none"");
        e.preventDefault();
    });

    $(document).on(""click"", '#custom-add-btn', function (e) {
        $('.k-grid-add').click();
        e.preventDefault();
        e.stopPropagation();
    });

    $(document).on(""click"", '#custom-save-btn', function (e) {
        $('.k-grid-save-changes').click();
        e.preventDefault();
        e.stopPropagation();
    });

    $(document).on(""click"", '#custom-cancel-btn', function (e) {
        $('.k-grid-cancel-changes').click();
        e.prev");
            WriteLiteral(@"entDefault();
        e.stopPropagation();
    });

    $(document).on(""click"", '#removeFilter', function (e) {
        clearFilter();
    });

    function getAdditionalParam(e) {
        var widget = $(""#dropDownList"").data(""kendoDropDownList"");
        return { items: widget };
    }

    function populateDDSession(tableName, optionCol) {
        $.post('/Grid/PopulateDD', { treeTable: tableName, optionCol: optionCol }, function (success) {

        });
    }

    function populateGridSession(type) {
        $.post('/Grid/List', { type: type }, function (success) {

        });
    }

    function valueMapperLanguage(options) {
        $.ajax({
            url: """);
#nullable restore
#line 441 "C:\Projects\ResearchApp\ResearchApp\Views\Home\Index.cshtml"
             Write(Url.Action("Dropdown_ValueMapper", "Grid"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
            data: convertValues(options.value, 'Language'),
            success: function (data) {
                options.success(data);
            }
        });
    }

       function valueMapperAuthor(options) {
        $.ajax({
            url: """);
#nullable restore
#line 451 "C:\Projects\ResearchApp\ResearchApp\Views\Home\Index.cshtml"
             Write(Url.Action("Dropdown_ValueMapper", "Grid"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
            data: convertValues(options.value, 'Author'),
            success: function (data) {
                options.success(data);
            }
        });
    }

       function valueMapperCity(options) {
        $.ajax({
            url: """);
#nullable restore
#line 461 "C:\Projects\ResearchApp\ResearchApp\Views\Home\Index.cshtml"
             Write(Url.Action("Dropdown_ValueMapper", "Grid"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
            data: convertValues(options.value, 'City'),
            success: function (data) {
                options.success(data);
            }
        });
    }

       function valueMapperCategory(options) {
        $.ajax({
            url: """);
#nullable restore
#line 471 "C:\Projects\ResearchApp\ResearchApp\Views\Home\Index.cshtml"
             Write(Url.Action("Dropdown_ValueMapper", "Grid"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
            data: convertValues(options.value, 'Category'),
            success: function (data) {
                options.success(data);
            }
        });
    }

       function valueMapperCountry(options) {
        $.ajax({
            url: """);
#nullable restore
#line 481 "C:\Projects\ResearchApp\ResearchApp\Views\Home\Index.cshtml"
             Write(Url.Action("Dropdown_ValueMapper", "Grid"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
            data: convertValues(options.value, 'Country'),
            success: function (data) {
                options.success(data);
            }
        });
    }

        function valueMapperRegion(options) {
        $.ajax({
            url: """);
#nullable restore
#line 491 "C:\Projects\ResearchApp\ResearchApp\Views\Home\Index.cshtml"
             Write(Url.Action("Dropdown_ValueMapper", "Grid"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
            data: convertValues(options.value, 'Region'),
            success: function (data) {
                options.success(data);
            }
        });
    }

       function valueMapperWork(options) {
        $.ajax({
            url: """);
#nullable restore
#line 501 "C:\Projects\ResearchApp\ResearchApp\Views\Home\Index.cshtml"
             Write(Url.Action("Dropdown_ValueMapper", "Grid"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
            data: convertValues(options.value, 'Work'),
            success: function (data) {
                options.success(data);
            }
        });
    }

       function valueMapperPublisher(options) {
        $.ajax({
            url: """);
#nullable restore
#line 511 "C:\Projects\ResearchApp\ResearchApp\Views\Home\Index.cshtml"
             Write(Url.Action("Dropdown_ValueMapper", "Grid"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
            data: convertValues(options.value, 'Publisher'),
            success: function (data) {
                options.success(data);
            }
        });
    }

    function convertValues(value, type) {
            var data = {};
            value = $.isArray(value) ? value : [value];
            for (var idx = 0; idx < value.length; idx++) {
                data[""values["" + idx + ""]""] = value[idx];
            }
            data.treeTable = type;
        return data;
    }

    function dropdownFilter(element) {
        element.removeAttr(""data-bind"");
        element.kendoMultiSelect({
            dataTextField: ""Option"",
            dataValueField: ""Id"",
            dataSource: {
                transport: {
                    read: {
                        type: ""POST"",
                        url: ""/Grid/PopulateDD"",
                        data: {
                            treeTable: this.treeTable,
                            optionCol: this.optionCol
  ");
            WriteLiteral(@"                      }
                    }
                }
            },
            change: function (e) {
                var filter = { logic: ""or"", filters: [] };
                var values = this.value();
                $.each(values, function (i, v) {
                    filter.filters.push({ field: currentFilterColumn + 'Id', operator: ""eq"", value: v });
                });
                console.log(this.dataSource.data());
                var dataSource = $(""#grid"").data().kendoGrid.dataSource;
                dataSource.filter(filter);
            }
        });
    }

    function columnMenuInit(e) {
        initColumnMenuFilter.call(this, e);
    }

    function clearFilter() {
        var filter = { logic: ""or"", filters: [] };
        var dataSource = $(""#grid"").data().kendoGrid.dataSource;
        dataSource.filter(filter);
    }

    function initColumnMenuFilter(e) {
        var menu = e.container.find("".k-menu"").data(""kendoMenu"");
        var filterMenu = e");
            WriteLiteral(@".container.find(""[data-role='filtermenu']"").getKendoFilterMenu();
        var grid = e.sender;
        var field = e.field;
        var helpTextElement = e.container.children("":first"").children("":last"");
        var fieldType = 'string';
        var filterOneValue, filterLogicValue, filterTwoValue, inputFilterOne, inputFilterTwo, ddFilterOne, ddFilterTwo;

        // Get Column type
        var fieldInfo = grid.dataSource.options.schema.model.fields[field];
        if (fieldInfo) {
            fieldType = fieldInfo.type;
        }
        var dataSource = this.dataSource;

        var dataSourceListView = new kendo.data.DataSource({
             type:""aspnetmvc-ajax"",
             transport: {
                 read: {
                     type: ""POST"",
                     url: ""/Grid/BindFilterListView"",
                     data: {
                         treeTable: 'Work',
                         optionCol: field
                     }
                 }
             },
        ");
            WriteLiteral(@"     pageSize: 50,
             serverPaging: true,
             serverSorting: true,
             sort: { field: field, dir: ""asc"" }
        });

        var dataSourceListViewScroll = new kendo.data.DataSource({
             type:""aspnetmvc-ajax"",
             transport: {
                 read: {
                     type: ""POST"",
                     url: ""/Grid/BindFilterListView"",
                     data: {
                         treeTable: 'Work',
                         optionCol: field
                     }
                 }
             },
             pageSize: 50,
             serverPaging: true,
             serverSorting: true,
             sort: { field: field, dir: ""asc"" }
        });

        var pageModel = {};
        pageModel[field] = 1;

        var columnDataSource = new kendo.data.DataSource({
            data: uniqueForField(dataSource.data(), field, fieldType),
            sort: { field: field, dir: ""asc"" }
        });

        filterMenu.popup.");
            WriteLiteral(@"bind(""open"", function (e) {
        });

        menu.bind(""open"", function (e) {
            if ($(e.item).find('.k-link').first().text() == ""Filter"") {
                var parentEle = helpTextElement.children("":last"").children("":first"");
                var elementToInsertAfter = parentEle.find('.k-filter-help-text');
                var container = parentEle.find('form');

                if (!dataSource.filter()) {
                    var gridDataSource = $(""#grid"").data().kendoGrid.dataSource;
                    columnDataSource.data(uniqueForField(gridDataSource.data(), field, fieldType));
                    columnDataSource.sort({ field: field, dir: ""asc"" });
                }

                if (parentEle.find('#list-view-' + field).length === 0) {
                    elementToInsertAfter.addClass('d-none');  //hide text above search box
                    var advancedOption = $(container).clone();

                    var ele = $(""<div class='k-textbox k-space-right'><input id=");
            WriteLiteral(@"'filter-search-"" + field + ""' placeholder='Search'><span class='k-icon k-i-zoom'></span></div>"").insertAfter(elementToInsertAfter);
                    var element = $(""<div id='list-view-"" + field + ""' class='checkbox-ontainer'></div>"").insertAfter(ele).kendoListView({
                        dataSource: dataSourceListView,
                        height: 135,
                        scrollable: ""endless"",
                        template: ""<div class='list-Item'><input type='checkbox' value='#:"" + field + ""#'/>#:"" + field + ""#</div>""
                    });

                   

                    if (fieldType === 'object') {
                        var listView = $(""#list-view-"" + field).data(""kendoListView"");
                        listView.destroy();
                        $(""#list-view-"" + field).remove(); // remove all ListView HTML
                        element = $(""<div id='list-view-"" + field + ""' class='checkbox-ontainer'></div>"").insertAfter(ele).kendoListView({
              ");
            WriteLiteral(@"              dataSource: columnDataSource,
                            template: ""<div><input type='checkbox' value='#:"" + field + "".Id#'/>#:"" + field + "".Option#</div>""
                        });
                    }


                    var advancedMenu = $(""<ul id='advanced-menu-"" + field + ""'></ul>"").insertAfter($(""#list-view-"" + field)).kendoMenu({
                        orientation: 'vertical'
                    }).data(""kendoMenu"");

                    $(advancedOption).find(""[data-role='numerictextbox']"").remove();
                    advancedMenu.append([
                        {
                            text: ""Advanced"",
                            encoded: false,
                            content: ""<div class='p-1'>"" + advancedOption.html() + ""</div>""
                        }
                    ]);

                    advancedMenu.bind(""open"", function (e) {
                        if (!inputFilterOne && !inputFilterTwo) {
                            var advance");
            WriteLiteral(@"dOptionFrm = $('#advanced-menu-' + field).find('.k-filter-menu-container');
                            console.log(""advanced menu form ::"" + advancedOptionFrm);
                            if (fieldType === 'object') {
                                var inputFirst = advancedOptionFrm.find(""input:eq(0)"");
                                var inputSecond = advancedOptionFrm.find(""input:eq(1)"");
                                inputFirst.removeClass('k-textbox').removeAttr(""data-bind"");
                                inputSecond.removeClass('k-textbox').removeAttr(""data-bind"");
                                var textField = field + "".Option"";
                                var valueField = field + "".Id"";

                                var comboBoxDataSource = columnDataSource;
                                var ddDataSource = new kendo.data.DataSource({
                                    data: comboBoxDataSource.data()
                                });
                                ddFi");
            WriteLiteral(@"lterOne = $(inputFirst).kendoDropDownList({
                                    dataSource: ddDataSource,
                                    dataTextField: textField,
                                    dataValueField: valueField,
                                    change: function (e) {
                                        console.log('Dropdown filter selected:: ' + this.value());
                                        inputFilterOne = this.value();
                                    }
                                }).data(""kendoDropDownList"");

                                ddFilterOne.setOptions({ optionLabel: ""Select"" });
                                ddFilterOne.refresh();
                                ddFilterOne.select(0);

                                ddFilterTwo = $(inputSecond).kendoDropDownList({
                                    dataSource: ddDataSource,
                                    dataTextField: textField,
                                    dataValueF");
            WriteLiteral(@"ield: valueField,
                                    change: function (e) {
                                        inputFilterTwo = this.value();
                                    }
                                }).data(""kendoDropDownList"");

                                ddFilterTwo.setOptions({ optionLabel: ""Select"" });
                                ddFilterTwo.refresh();
                                ddFilterTwo.select(0);

                                var firstValueDropDown = advancedOptionFrm.find(""select:eq(0)"");
                                var logicDropDown = advancedOptionFrm.find(""select:eq(1)"");
                                var secondValueDropDown = advancedOptionFrm.find(""select:eq(2)"");
                                logicDropDown.kendoDropDownList();
                                var data = [
                                    { text: ""Is equal to"", value: ""eq"" },
                                    { text: ""Is not equal to"", value: ""neq"" },
            ");
            WriteLiteral(@"                        { text: ""Is null"", value: ""isnull"" },
                                    { text: ""Is not null"", value: ""isnotnull"" }
                                ];
                                $(firstValueDropDown).kendoDropDownList({
                                    dataTextField: ""text"",
                                    dataValueField: ""value"",
                                    dataSource: data,
                                    index: 0,
                                    change: function (e) {
                                        filterOneValue = this.value();
                                    }
                                });
                                $(secondValueDropDown).kendoDropDownList({
                                    dataTextField: ""text"",
                                    dataValueField: ""value"",
                                    dataSource: data,
                                    index: 0,
                                    c");
            WriteLiteral(@"hange: function (e) {
                                        filterTwoValue = this.value();
                                    }
                                });

                                filterOneValue = firstValueDropDown.val();
                                filterTwoValue = secondValueDropDown.val();
                                filterLogicValue = logicDropDown.val();

                                $(logicDropDown).change(function (e) {
                                    filterLogicValue = this.value;
                                });
                            }
                            else {
                                var filterOne = advancedOptionFrm.find('select:eq(0)');
                                var filterLogic = advancedOptionFrm.find('select:eq(1)');
                                var filterTwo = advancedOptionFrm.find('select:eq(2)');
                                filterOne.kendoDropDownList();
                                filterLogic.ke");
            WriteLiteral(@"ndoDropDownList();
                                filterTwo.kendoDropDownList();
                                filterOneValue = filterOne.val();
                                filterTwoValue = filterTwo.val();
                                filterLogicValue = filterLogic.val();
                                if (fieldType === 'number') {
                                    advancedOptionFrm.children('.k-numerictextbox').remove();

                                    $(""<input />"").insertAfter(advancedOptionFrm.children(""span:first"")).kendoNumericTextBox({
                                        spinners: false,
                                        decimals: 0,
                                        format: ""#""
                                    });
                                    $(""<input />"").insertAfter(advancedOptionFrm.children(""span:last"")).kendoNumericTextBox({
                                        spinners: false,
                                        decimals: 0,
  ");
            WriteLiteral(@"                                      format: ""#""
                                    });
                                }
                                else {
                                    advancedOptionFrm.children('.k-textbox').remove();
                                    $(""<textarea class='k-textbox'></textarea>"").insertAfter(advancedOptionFrm.children(""span:first""));
                                    $(""<textarea class='k-textbox'></textarea>"").insertAfter(advancedOptionFrm.children(""span:last""));
                                }
                                var inputFilters = advancedOptionFrm.find('input[style*=""display: none""]');
                                if (inputFilters.length === 0) {
                                    inputFilters = advancedOptionFrm.find('input:not([style*=""display: none""])');
                                }
                                if (inputFilters.length) {
                                    $(inputFilters[0]).on('keyup mouseup cha");
            WriteLiteral(@"nge', function (e) {
                                        console.log(""filter one input event::"" + this.value);
                                        inputFilterOne = this.value;
                                    });

                                    $(inputFilters[1]).on('keyup mouseup change', function (e) {
                                        console.log(""filter two input event::"" + this.value);
                                        inputFilterTwo = this.value;
                                    });
                                }

                                var textareaFilters = advancedOptionFrm.find('textarea');

                                if (textareaFilters.length) {
                                    $(textareaFilters[0]).on('keyup mouseup change', function (e) {
                                        console.log(""filter one input event::"" + this.value);
                                        inputFilterOne = this.value;
                               ");
            WriteLiteral(@"     });

                                    $(textareaFilters[1]).on('keyup mouseup change', function (e) {
                                        console.log(""filter two input event::"" + this.value);
                                        inputFilterTwo = this.value;
                                    });
                                }

                                $(filterOne).change(function (e) {
                                    console.log(""filter one dropdown event::"" + this.value);
                                    filterOneValue = this.value;
                                });

                                $(filterTwo).change(function (e) {
                                    console.log(""filter two dropdown event::"" + this.value);
                                    filterTwoValue = this.value;
                                });

                                $(filterLogic).change(function (e) {
                                    console.log(""filter logic dr");
            WriteLiteral(@"opdown event::"" + this.value);
                                    filterLogicValue = this.value;
                                });
                            }
                        }
                        setTimeout(function () {
                            $('#advanced-menu-' + field).find('input:first').focus();
                        }, 100);
                    });

                    // remove elements after advanced menu
                    $(container).find(""ul"").nextAll('span').remove();
                    $(container).find(""ul"").nextAll('input').remove();

                    container.find(""[type='submit']"").click(function (e) {
                        e.preventDefault();
                        e.stopPropagation();
                        if (element) {
                            var filter = dataSource.filter() || { logic: ""and"", filters: [] };
                            var fieldFilters = $.map(element.find("":checkbox:checked""), function (input, index) {
        ");
            WriteLiteral(@"                        //if (fieldType === 'object') {
                                //    if (index == 0) {
                                //        ddFilterOne.value(input.value);
                                //    }
                                //    if (index == 1) {
                                //        ddFilterTwo.value(input.value);
                                //    }
                                //}
                                return {
                                    field: field,
                                    operator: 'eq',
                                    value: parseValue(fieldType, input.value)
                                };
                            });

                            // Get Field Filters
                            if (inputFilterOne || inputFilterTwo) {
                                if (inputFilterOne) {
                                    fieldFilters.push({
                                        field: field,
  ");
            WriteLiteral(@"                                      operator: filterOneValue,
                                        value: parseValue(fieldType, inputFilterOne)
                                    });
                                }
                                if (inputFilterTwo) {
                                    fieldFilters.push({
                                        field: field,
                                        operator: filterTwoValue,
                                        value: parseValue(fieldType, inputFilterTwo)
                                    });
                                }
                            }



                            if (fieldFilters.length) {
                                removeFiltersForField(filter, field);
                                filter.filters.push({
                                    logic: 'or',
                                    filters: fieldFilters
                                });
                                cons");
            WriteLiteral(@"ole.log(fieldFilters);
                                console.log(filterLogicValue);
                                console.log(columnDataSource);
                                dataSource.filter(filter);
                            }
                            var popup = $(helpTextElement.children("":last"").children("":first"")).data(""kendoPopup"");
                            console.log(popup);
                            popup.close();
                        }
                    });

                    $('#filter-search-' + field).on('keyup', function (e) {
                        console.log('search items::' + this.value);
                        if (fieldType === 'object') {
                            columnDataSource.filter({ field: field + "".Option"", operator: ""contains"", value: this.value });
                        }
                        else {
                            columnDataSource.filter({ field: field, operator: ""contains"", value: this.value });
                   ");
            WriteLiteral(@"     }
                    });
                }
                var processScroll = true;
                $('#list-view-' + field).on('scroll', function (e) {
                    var $o = $(e.currentTarget);
                    if (processScroll && $(this).scrollTop() + $(this).innerHeight() >= $(this)[0].scrollHeight) {
                        processScroll = false;
                        pageModel[field]++;
                        console.log(pageModel);
                        var listView = $('#list-view-' + field).data('kendoListView');
                        dataSourceListViewScroll.query({
                            page: pageModel[field],
                            pageSize: 50,
                            sort: { field: field, dir: ""asc"" }
                        }).then(function () {
                            if (dataSourceListViewScroll.data().length) {
                                dataSourceListViewScroll.data().forEach(x => {
                                    listVie");
            WriteLiteral(@"w.dataSource.add(x);
                                });
                                processScroll = true;
                                //$('#list-view-' + field).scrollTo($('#list-view-' + field + ' .list-Item').last());
                            }
                            else {
                                processScroll = false;
                            }
                            
                        });
                    }

                    if ($(this).scrollTop() + $(this).innerHeight() >= $(this)[0].scrollHeight) {
               

                    }
                 });

                setTimeout(function () {
                    $('#filter-search-' + field).focus();
                }, 600);

            }
        });
    }
    function removeDuplicates(items, field) {
        var getter = function (item) { return item[field] },
            result = [],
            index = 0,
            seen = {};

        while (index < items.length) {");
            WriteLiteral(@"
            var item = items[index++],
                text = getter(item);

            if (text !== undefined && text !== null && !seen.hasOwnProperty(text)) {
                result.push(item);
                seen[text] = true;
            }
        }

        return result;
    }

    //////////////////////////////////  Custom Filter  //////////////////////////////

    function parseValue(type, value) {
        switch (type) {
            case 'number':
                return parseInt(value);
            case 'object':
                return (typeof value == 'string') ? value : parseInt(value);
            default:
                return value;
        }
    }

    function removeFiltersForField(expression, field) {
        if (expression.filters) {
            expression.filters = $.grep(expression.filters, function (filter) {
                removeFiltersForField(filter, field);
                if (filter.filters) {
                    return filter.filters.length;
    ");
            WriteLiteral(@"            } else {
                    return filter.field != field;
                }
            });
        }
    }

    function uniqueForField(data, field, fieldType) {
        var map = {};
        var result = [];
        var item;
        for (var i = 0; i < data.length; i++) {
            item = data[i];
            if (fieldType === 'object') {
                if (!map[item[field]['Option']] && item[field]['Option']) {
                    result.push(item);
                    map[item[field]['Option']] = true;
                }
            }
            else {
                if (!map[item[field]] && item[field]) {
                    result.push(item);
                    map[item[field]] = true;
                }
            }
        }

        if (fieldType === 'object') {
            result.sort(function (a, b) {
                var optionA = a[field]['Option'].toLowerCase(), optionB = b[field]['Option'].toLowerCase()
                if (optionA < optionB) //sor");
            WriteLiteral(@"t string ascending
                    return -1
                if (optionA > optionB)
                    return 1
                return 0 //default return value (no sorting)
            })
        }
        return result;
    }

    //function onChange(e) {
    //    dataSourceShared.data(e.items);
    //}


</script>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
